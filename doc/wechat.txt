1. 用户登录
/wechat/login, methods=['POST']
Content-Type: application/json
参数:
json = {
    "mobile": "手机号码",
    "code": "验证码",
}
返回:
{
    //用户信息
    "result" : {
    }
    "success": true,
    "error": null
}

2. 请求短信验证码
/wechat/captcha, methods=['POST']
Content-Type: application/json
参数:
json = {
    "mobile": "手机号码"
    "geetest_challenge": 'xx'
    "geetest_validate": 'xx'
    "geetest_seccode": 'xx'
}
返回:
{
    "success": true,
    "result": "success",
    "error": null
}

3. 微信端获取用户信息
/wechat/user, methods=['GET']
{
    "success": true,
    "result": {
            'id': self.id,
            //用户昵称
            'nick_name': self.nick_name,
            //用户头像url
            'head_img_url': self.head_img_url,
            //手机号码
            'mobile': self.mobile,
            //总充值金额
            'total_account': self.total_account,
            //总消费金额
            'used_account': self.used_account,
            //余额
            'balance_account': self.balance_account,
            //当前用户是否被禁用的状态
            'state': self.state,
            'ctime': self.ctime.strftime('%Y-%m-%d %H:%M:%S'),
            'utime': self.utime.strftime('%Y-%m-%d %H:%M:%S'),
        }
    ,
    "error": null
}


4. 微信端充值接口
/wechat/recharge/<int:account>, methods=['GET']
返回:
{
    "success": true,
    "result": 'success',
    "error": null
}

5. 分页查询用户充值信息
/wechat/recharge/list method=POST
Content-Type: application/json
参数
post = {
     "page": 1,
     "size": 10,
     "start_time": "2017-07-01 23:23:23",   //可选状态 筛选起始时间
     "end_time": "2017-10-30 23:23:23"      //可选状态  筛选结束时间
}
返回
{
    "result": {
        "total": 200,
        "data": [
            {
                'id': self.id,
                # 用户信息
                'user': self.user.to_dict(),
                # 充值金额
                'amount': self.amount,
                # 微信交易订单号
                'transaction_id': self.transaction_id,
                # 充值时间
                'pay_time': self.pay_time.strftime('%Y-%m-%d %H:%M:%S'),
                'utime': self.utime.strftime('%Y-%m-%d %H:%M:%S'),
                'ctime': self.ctime.strftime('%Y-%m-%d %H:%M:%S'),
            },
            {},
            ...
        ]
    },
    "success": true,
    "error": null
}

6. 判断当前用户是否已经注册或者是否存在openid
/wechat/check, method=GET
参数:
无
返回:
已注册用户: {
    'success': True,
    'result': 'success',
    'error': None,
}

没有openid: {
    'success': False,
    'result': -1,
    'error': xxxx
}

没有注册: {
    'success': False,
    'result': 0,
    'error': xxxx
}

7. 查询用户消费记录信息
/wechat/expense/list method=POST
Content-Type: application/json
参数
post = {
     "page": 1,
     "size": 10,
     "start_time": "2017-07-01 23:23:23",   //可选状态 筛选起始时间
     "end_time": "2017-10-30 23:23:23"      //可选状态  筛选结束时间
}
返回
{
    "result": {
        "total": 200,
        "data": [
            {
               'id': self.id,
                'user_id': self.user_id,
                'device_id': self.device_id,
                'province': self.province,
                'city': self.city,
                'area': self.area,
                'location': self.location,
                # 消费金额
                'cost_money': self.cost_money,
                # 起始消费时间
                'ctime': self.ctime.strftime('%Y-%m-%d %H:%M:%S'),
                'utime': self.utime.strftime('%Y-%m-%d %H:%M:%S'),
                # 下机时间
                'end_time': self.end_time.strftime('%Y-%m-%d %H:%M:%S'),
                # 这次消费花费的时间
                'cost_time': self.cost_time // 60  # 分钟
            },
            {},
            ...
        ]
    },
    "success": true,
    "error": null
}

8. 获得wx.config
/wechat/jsapi/signature, methods=['POST']
Content-Type: application/json
参数
post = {
     "url": xxxx
}

返回
{
    "result": {
        'debug': True,
        'appId': settings.WECHAT_APP_ID,
        'timestamp': timestamp,
        'nonceStr': nonceStr,
        'signature': signature,
        'jsApiList': ['scanQRCode']
    }
    "success": true,
    "error": null
}

9. 获得极验初始化配置信息
/wechat/geetest, methods=['GET']
参数
无
返回:
{
    "result": {
            'success': True or False,  # 布尔类型。极验API服务器是否宕机（即处于 fallback 状态）
            'gt': 'xxxxx',  # 字符串类型。验证 id，极验后台申请得到
            'challenge': challenge, # 字符串类型。验证流水号，后服务端 SDK 向极验服务器申请得到
            "new_captcha": True or False # 布尔类型。宕机情况下使用，表示验证是 3.0 还是 2.0，3.0 的 sdk 该字段为 true
            }
    "success": true,
    "error": null
}